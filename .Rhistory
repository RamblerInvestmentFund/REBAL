meanReturns <- colMeans(portfolio.returns) #calculating mean return for each ticker
covMat <- cov(portfolio.returns) #covariance matrix
portfolio.returns <- na.omit(portfolio.returns)
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
windows = rollingWindows(portfolio.returns, period = "6m", by = "1m")
frontier <- portfolioFrontier(portfolio.returns, portSpec, constraints = weights)
rolled.frontier <- rollingPortfolioFrontier(portfolio.returns, portSpec,
constraints = weights, from = windows$from,
to = windows$to)
tickers <- c("VOX", "VCR",
"VDC", "VDE",
"VFH", "VHT",
"VIS", "VGT",
"VAW", "VNQ",
"VPU")
weights <- c("minW[c(1:11)]=.05",
"maxW[c(1:11)]=.2")
start_date <- "2010-01-01" #Format year-mo-da
end_date <- substr(Sys.time(), 0, 10) #gets current date
tar_return <- .1 #target return - 10%
tar_risk <- .05 #target risk variance - 5%
alp <- .01 #alpha
risk_free <- .0225 #risk free rate, treasury
risk_aversion <- 1 #risk aversion coefficient
tickers <- c("VOX", "VCR",
"VDC", "VDE",
"VFH", "VHT",
"VIS", "VGT",
"VAW", "VNQ",
"VPU")
weights <- c("minW[c(1:11)]=.05",
"maxW[c(1:11)]=.2")
######################STEP ONE: Wrangling Data #########################################
portfolio <- NULL #normally you dont need to declare variables null before using them
portfolio.div <- NULL # R's scope requirements make this easier when binding within a loop..
for(ticker in tickers){ #looping through portfolio, gathering returns & dividends
portfolio <- cbind(portfolio, getSymbols(ticker, from = start_date, to = end_date, auto.assign =  FALSE)[,6])
portfolio.div <- cbind(portfolio.div, getDividends(ticker,from = start_date, to = end_date, auto.assign =  FALSE))
}
colnames(portfolio) <- tickers #making the dataframes look pretty
names(portfolio.div) <- gsub(".div", "", names(portfolio.div))
portfolio.yield <- colSums(portfolio.div, na.rm = TRUE) #calculating dividend yield
portfolio.yield <- as.data.frame(t(portfolio.yield)) #converting to row
portfolio.yield$MINT <- NULL #removing cash yield - placeholde
for(ticker in names(portfolio.yield)){ #adding dividends into total return.
portfolio[nrow(portfolio), ticker] <- as.double(portfolio[nrow(portfolio), ticker]) + as.double(portfolio.yield[ticker])
}
portfolio.returns <- CalculateReturns(portfolio) #calculating returns with dividends added
portfolio <- na.omit(portfolio) #removing empty/NA values
portfolio.returns <- as.timeSeries(portfolio.returns) #converting to time series, required below
meanReturns <- colMeans(portfolio.returns) #calculating mean return for each ticker
covMat <- cov(portfolio.returns) #covariance matrix
portfolio.returns <- na.omit(portfolio.returns) # YOU MAY NEED THIS FOR ERRORS BELOW
######################STEP THREE: CONSTRUCTION #########################################
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
windows = rollingWindows(portfolio.returns, period = "6m", by = "1m")
frontier <- portfolioFrontier(portfolio.returns, portSpec, constraints = weights)
rolled.frontier <- rollingPortfolioFrontier(portfolio.returns, portSpec,
constraints = weights, from = windows$from,
to = windows$to)
start_date <- "2010-01-01" #Format year-mo-da
end_date <- substr(Sys.time(), 0, 10) #gets current date
tar_return <- .1 #target return - 10%
tar_risk <- .05 #target risk variance - 5%
alp <- .01 #alpha
risk_free <- .0225 #risk free rate, treasury
risk_aversion <- 1 #risk aversion coefficient
tickers <- c("VOX", "VCR",
"VDC", "VDE",
"VFH", "VHT",
"VIS", "VGT",
"VAW", "VNQ",
"VPU")
weights <- c("minW[c(1:11)]=.05",
"maxW[c(1:11)]=.2")
######################STEP ONE: Wrangling Data #########################################
portfolio <- NULL #normally you dont need to declare variables null before using them
portfolio.div <- NULL # R's scope requirements make this easier when binding within a loop..
for(ticker in tickers){ #looping through portfolio, gathering returns & dividends
portfolio <- cbind(portfolio, getSymbols(ticker, from = start_date, to = end_date, auto.assign =  FALSE)[,6])
portfolio.div <- cbind(portfolio.div, getDividends(ticker,from = start_date, to = end_date, auto.assign =  FALSE))
}
colnames(portfolio) <- tickers #making the dataframes look pretty
names(portfolio.div) <- gsub(".div", "", names(portfolio.div))
portfolio.yield <- colSums(portfolio.div, na.rm = TRUE) #calculating dividend yield
portfolio.yield <- as.data.frame(t(portfolio.yield)) #converting to row
portfolio.yield$MINT <- NULL #removing cash yield - placeholde
for(ticker in names(portfolio.yield)){ #adding dividends into total return.
portfolio[nrow(portfolio), ticker] <- as.double(portfolio[nrow(portfolio), ticker]) + as.double(portfolio.yield[ticker])
}
portfolio.returns <- CalculateReturns(portfolio) #calculating returns with dividends added
portfolio <- na.omit(portfolio) #removing empty/NA values
portfolio.returns <- as.timeSeries(portfolio.returns) #converting to time series, required below
meanReturns <- colMeans(portfolio.returns) #calculating mean return for each ticker
covMat <- cov(portfolio.returns) #covariance matrix
portfolio.returns <- na.omit(portfolio.returns) # YOU MAY NEED THIS FOR ERRORS BELOW
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
windows = rollingWindows(portfolio.returns, period = "6m", by = "1m")
frontier <- portfolioFrontier(portfolio.returns, portSpec, constraints = weights)
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
library(tidyr)
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
library(tidyr)
start_date <- "2010-01-01" #Format year-mo-da
end_date <- substr(Sys.time(), 0, 10) #gets current date
tar_return <- .1 #target return - 10%
tar_risk <- .05 #target risk variance - 5%
alp <- .01 #alpha
risk_free <- .0225 #risk free rate, treasury
risk_aversion <- 1 #risk aversion coefficient
tickers <- c("VOX", "VCR",
"VDC", "VDE",
"VFH", "VHT",
"VIS", "VGT",
"VAW", "VNQ",
"VPU")
weights <- c("minW[c(1:11)]=.05",
"maxW[c(1:11)]=.2")
portfolio <- NULL #normally you dont need to declare variables null before using them
portfolio.div <- NULL # R's scope requirements make this easier when binding within a loop..
for(ticker in tickers){ #looping through portfolio, gathering returns & dividends
portfolio <- cbind(portfolio, getSymbols(ticker, from = start_date, to = end_date, auto.assign =  FALSE)[,6])
portfolio.div <- cbind(portfolio.div, getDividends(ticker,from = start_date, to = end_date, auto.assign =  FALSE))
}
colnames(portfolio) <- tickers #making the dataframes look pretty
names(portfolio.div) <- gsub(".div", "", names(portfolio.div))
portfolio.yield <- colSums(portfolio.div, na.rm = TRUE) #calculating dividend yield
portfolio.yield <- as.data.frame(t(portfolio.yield)) #converting to row
portfolio.yield$MINT <- NULL #removing cash yield - placeholde
for(ticker in names(portfolio.yield)){ #adding dividends into total return.
portfolio[nrow(portfolio), ticker] <- as.double(portfolio[nrow(portfolio), ticker]) + as.double(portfolio.yield[ticker])
}
portfolio.returns <- CalculateReturns(portfolio) #calculating returns with dividends added
portfolio <- na.omit(portfolio) #removing empty/NA values
portfolio.returns <- as.timeSeries(portfolio.returns) #converting to time series, required below
meanReturns <- colMeans(portfolio.returns) #calculating mean return for each ticker
covMat <- cov(portfolio.returns) #covariance matrix
portfolio.returns <- na.omit(portfolio.returns)
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
windows = rollingWindows(portfolio.returns, period = "6m", by = "1m")
frontier <- portfolioFrontier(portfolio.returns, portSpec, constraints = weights)
rolled.frontier <- rollingPortfolioFrontier(portfolio.returns, portSpec,
constraints = weights, from = windows$from,
to = windows$to)
?getSymbols
weights
rolled.frontier
rolled.frontier <- rollingPortfolioFrontier(portfolio.returns, portSpec,
constraints = weights, from = windows$from,
to = windows$to)
start_date <- "2015-01-01" #Format year-mo-da
end_date <- substr(Sys.time(), 0, 10) #gets current date
portfolio <- NULL #normally you dont need to declare variables null before using them
portfolio.div <- NULL # R's scope requirements make this easier when binding within a loop..
for(ticker in tickers){ #looping through portfolio, gathering returns & dividends
portfolio <- cbind(portfolio, getSymbols(ticker, from = start_date, to = end_date, auto.assign =  FALSE)[,6])
portfolio.div <- cbind(portfolio.div, getDividends(ticker,from = start_date, to = end_date, auto.assign =  FALSE))
}
colnames(portfolio) <- tickers #making the dataframes look pretty
names(portfolio.div) <- gsub(".div", "", names(portfolio.div))
portfolio.yield <- colSums(portfolio.div, na.rm = TRUE) #calculating dividend yield
portfolio.yield <- as.data.frame(t(portfolio.yield)) #converting to row
portfolio.yield$MINT <- NULL #removing cash yield - placeholde
for(ticker in names(portfolio.yield)){ #adding dividends into total return.
portfolio[nrow(portfolio), ticker] <- as.double(portfolio[nrow(portfolio), ticker]) + as.double(portfolio.yield[ticker])
}
portfolio.returns <- CalculateReturns(portfolio) #calculating returns with dividends added
portfolio <- na.omit(portfolio) #removing empty/NA values
portfolio.returns <- as.timeSeries(portfolio.returns) #converting to time series, required below
meanReturns <- colMeans(portfolio.returns) #calculating mean return for each ticker
covMat <- cov(portfolio.returns) #covariance matrix
portfolio.returns <- na.omit(portfolio.returns) # YOU MAY NEED THIS FOR ERRORS BELOW
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
windows = rollingWindows(portfolio.returns, period = "6m", by = "1m")
frontier <- portfolioFrontier(portfolio.returns, portSpec, constraints = weights)
rolled.frontier <- rollingPortfolioFrontier(portfolio.returns, portSpec,
constraints = weights, from = windows$from,
to = windows$to)
rolled.frontier
start_date <- "2000-01-01" #Format year-mo-da
end_date <- substr(Sys.time(), 0, 10) #gets current date
tar_return <- .1 #target return - 10%
tar_risk <- .05 #target risk variance - 5%
alp <- .01 #alpha
risk_free <- .0225 #risk free rate, treasury
risk_aversion <- 1 #risk aversion coefficient
tickers <- c("VOX", "VCR",
"VDC", "VDE",
"VFH", "VHT",
"VIS", "VGT",
"VAW", "VNQ",
"VPU")
weights <- c("minW[c(1:11)]=.05",
"maxW[c(1:11)]=.2")
portfolio <- NULL #normally you dont need to declare variables null before using them
portfolio.div <- NULL # R's scope requirements make this easier when binding within a loop..
for(ticker in tickers){ #looping through portfolio, gathering returns & dividends
portfolio <- cbind(portfolio, getSymbols(ticker, from = start_date, to = end_date, auto.assign =  FALSE)[,6])
portfolio.div <- cbind(portfolio.div, getDividends(ticker,from = start_date, to = end_date, auto.assign =  FALSE))
}
colnames(portfolio) <- tickers #making the dataframes look pretty
names(portfolio.div) <- gsub(".div", "", names(portfolio.div))
portfolio.yield <- colSums(portfolio.div, na.rm = TRUE) #calculating dividend yield
portfolio.yield <- as.data.frame(t(portfolio.yield)) #converting to row
portfolio.yield$MINT <- NULL #removing cash yield - placeholde
for(ticker in names(portfolio.yield)){ #adding dividends into total return.
portfolio[nrow(portfolio), ticker] <- as.double(portfolio[nrow(portfolio), ticker]) + as.double(portfolio.yield[ticker])
}
portfolio.returns <- CalculateReturns(portfolio) #calculating returns with dividends added
portfolio <- na.omit(portfolio) #removing empty/NA values
portfolio.returns <- as.timeSeries(portfolio.returns) #converting to time series, required below
meanReturns <- colMeans(portfolio.returns) #calculating mean return for each ticker
covMat <- cov(portfolio.returns) #covariance matrix
portfolio.returns <- na.omit(portfolio.returns) # YOU MAY NEED THIS FOR ERRORS BELOW
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
windows = rollingWindows(portfolio.returns, period = "6m", by = "1m")
frontier <- portfolioFrontier(portfolio.returns, portSpec, constraints = weights)
rolled.frontier <- rollingPortfolioFrontier(portfolio.returns, portSpec,
constraints = weights, from = windows$from,
to = windows$to)
install.packages(vignette )
install.packages(vignette)
install.packages("vignette")
library(vignette)
library("vignette")
library(dplyr)
?fread
test <- function(data, weights=c()){print(data)}
test(1)
source('~/RIF/GUI/read_settings.R')
source('~/RIF/GUI/v1/SETTINGS_v1.R')
install package(swirl)
install.packages(swirl)
install.packages("swirl")
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
library(tidyr)
source("C:\\Users\\patdj\\Documents\\RIF\\GUI\\v1\\SETTINGS_v1.R")
######################      MISC: CONFIG       #########################################
setwd(settings.directory) # sets the working directory
start_date <- settings.start #Format year-mo-da
end_date <- settings.end #gets current date
tar_return <- .1 #target return - 10%
tar_risk <- .05 #target risk variance - 5%
alp <- .01 #alpha
risk_free <- .0275 #risk free rate, treasury
risk_aversion <- settings.risk_av #risk aversion coefficient
tickers <- settings.tickers
weights <- c(settings.weights)
######################STEP ONE: Wrangling Data #########################################
portfolio <- NULL #normally you dont need to declare variables null before using them
portfolio.div <- NULL # R's scope requirements make this easier when binding within a loop..
for(ticker in tickers){ #looping through portfolio, gathering returns & dividends
portfolio <- cbind(portfolio, getSymbols(ticker, from = start_date, to = end_date, auto.assign =  FALSE)[,6])
portfolio.div <- cbind(portfolio.div, getDividends(ticker,from = start_date, to = end_date, auto.assign =  FALSE))
}
colnames(portfolio) <- tickers #making the dataframes look pretty
names(portfolio.div) <- gsub(".div", "", names(portfolio.div))
portfolio.yield <- colSums(portfolio.div, na.rm = TRUE) #calculating dividend yield
portfolio.yield <- as.data.frame(t(portfolio.yield)) #converting to row
portfolio.yield$MINT <- NULL #removing cash yield - placeholde
for(ticker in names(portfolio.yield)){ #adding dividends into total return.
portfolio[nrow(portfolio), ticker] <- as.double(portfolio[nrow(portfolio), ticker]) + as.double(portfolio.yield[ticker])
}
portfolio.returns <- CalculateReturns(portfolio) #calculating returns with dividends added
portfolio <- na.omit(portfolio) #removing empty/NA values
portfolio.returns <- as.timeSeries(portfolio.returns) #converting to time series, required below
meanReturns <- colMeans(portfolio.returns) #calculating mean return for each ticker
covMat <- cov(portfolio.returns) #covariance matrix
portfolio.returns <- na.omit(portfolio.returns) # YOU MAY NEED THIS FOR ERRORS BELOW
######################STEP THREE: CONSTRUCTION #########################################
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
######################STEP FOUR: PORTFOLIO GENERATION#########################################
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolio.returns, spec = portSpec, constraints = weights)
efmvPort <- minvariancePortfolio(portfolio.returns, spec = portSpec, constraints = weights)
efficientPort <- efficientPortfolio(portfolio.returns, spec = portSpec, constraints = weights)
minRiskPort <- minriskPortfolio(portfolio.returns, spec = portSpec, constraints = weights)
#the above functions work, but with new constraints added in, I need more memory to get more results
frontierWeights <- getWeights(effFrontier) # get allocations for each instrument for each point on the efficient frontier
frontierReturns <- getTargetReturn(effFrontier) #generates the return
frontier <- cbind(frontierWeights, frontierReturns) #formats return and weights into a dataframe
library("sqldf")
library("dplyr")
library("data.table")
################# READING sETTINGS #########################
setwd("C:\\Users\\patdj\\Documents\\RIF\\GUI\\v1")
settings <- read.csv("RIF_PORT.csv")
settings.directory <- as.character(settings$Directory[1])
settings.risk_av <- settings$Risk.Aversion[1]
settings.start <- gsub("/", "-",as.character(settings$Start.Time[1]))
settings.end <-  gsub("/", "-", as.character(settings$End.Time[1]))
settings.period <- as.character(settings$Period[1])
settings.ind_min <- settings$Ind.Min[1]
settings.ind_max <- settings$Ind.Max[1]
settings.tickers <- as.character(settings$Ticker)
settings.groups <- as.character(unique(settings$Group))
raw_data <- settings[,1:7]
################# GENERATING WEIGHTS ######################
# This is a SQL query that helps format and extract the weights from
# the excel document.
ticker_query <- '
SELECT "Group", "Group.Type",  Number AS gSTART, Number AS gEND, "Group.Min", "Group.Max", "Weight" FROM raw_data WHERE "Group" = "-"
UNION
SELECT "Group", "Group.Type", MIN(Number) AS gSTART, MAX(Number) AS gEND, "Group.Min", "Group.Max", "Weight" FROM raw_data WHERE "Group" != "-" GROUP BY "Group", "Group.Type"
'
settings.ext_weights <- sqldf(ticker_query) # running sql query and extracting weights
# Input:  type - Constraint Type (Box, Sum, Flat) - read fPortfolio documentation for specifics
#         minmax - lower or upper constraint designation
#         start - which security # does the group start at
#         end   - which security # does the group end at
#         weight - group/flat weight
# Output: outputs a formated string that is input into the optimization tool.
# Description:
# Basically this function does all the formatting that once needed to be done by hand.
# You input which security #'s need to be grouped, the group weight, and the type of constraint
# and the function will output the string needed to be input into the model to do what you want.
# This script outputs one at a time. We will loop through all the groups and input them into this function later.
weight_sub <- function(type, minmax, start, end, weight){
template.box.min <- "minW[!:@]=#"
template.box.max <- "maxW[!:@]=#"
template.sum.min <- "minsumW[!:@]=#"
template.sum.max <- "maxsumW[!:@]=#"
if(type == "box" || type == "-"){
if(minmax == "min"){temp <- template.box.min}
else{temp <- template.box.max}
}
if(type == "sum"){
if(minmax == "min"){temp <- template.sum.min}
else{temp <- template.sum.max}
}
return(gsub("#",weight,gsub("@",end,gsub("!", start, temp))))
}
#Inputs: data - basically we input a data frame of groups/flat weights for the function to iterate through
#        weights - if you have a list of prewritten weights you can input them here and this function
#                   will append the newly generated weights onto your pre-created ones.
#                   if you don't have any prewritten weights, just input c().
gen_weights <- function(data, weights=c()){
for(i in 1:nrow(data)){
if(data[i,2] == '-'){
flat.min <- weight_sub(data[i,2], "min", data[i,3], data[i,4], data[i,7])
flat.max <- weight_sub(data[i,2], "max", data[i,3], data[i,4], data[i,7])
weights <- c(weights, flat.min, flat.max)
}
else if(data[i,2] == 'box'){
if(data[i,5]!= "-"){
box.min <- weight_sub(data[i,2], "min", data[i,3], data[i,4], data[i,5])
weights <- c(weights, box.min)
}
if(data[i,6]!= "-") {
box.max <- weight_sub(data[i,2], "max", data[i,3], data[i,4], data[i,6])
weights <- c(weights, box.max)
}
}
else if(data[i,2] == 'sum'){
if(data[i,5] != "-"){
sum.min <- weight_sub(data[i,2], "min", data[i,3], data[i,4], data[i,5])
weights <- c(weights, sum.min)
}
if(data[i,6] != "-"){
sum.max <- weight_sub(data[i,2], "max", data[i,3], data[i,4], data[i,6])
weights <- c(weights, sum.max)
}
}
}
allMin <- weight_sub("box", "min", 1, length(settings.tickers), settings.ind_min)
allMax <- weight_sub("box", "max", 1, length(settings.tickers), settings.ind_max)
weights <- c(weights, allMin, allMax)
return(weights)
}
settings.weights <- gen_weights(settings.ext_weights)
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(dplyr)
library(PerformanceAnalytics)
library(ggplot2)
library(tidyr)
source("C:\\Users\\patdj\\Documents\\RIF\\GUI\\v1\\SETTINGS_v1.R")
######################      MISC: CONFIG       #########################################
setwd(settings.directory) # sets the working directory
start_date <- settings.start #Format year-mo-da
end_date <- settings.end #gets current date
tar_return <- .1 #target return - 10%
tar_risk <- .05 #target risk variance - 5%
alp <- .01 #alpha
risk_free <- .0275 #risk free rate, treasury
risk_aversion <- settings.risk_av #risk aversion coefficient
tickers <- settings.tickers
weights <- c(settings.weights)
######################STEP ONE: Wrangling Data #########################################
portfolio <- NULL #normally you dont need to declare variables null before using them
portfolio.div <- NULL # R's scope requirements make this easier when binding within a loop..
for(ticker in tickers){ #looping through portfolio, gathering returns & dividends
portfolio <- cbind(portfolio, getSymbols(ticker, from = start_date, to = end_date, auto.assign =  FALSE)[,6])
portfolio.div <- cbind(portfolio.div, getDividends(ticker,from = start_date, to = end_date, auto.assign =  FALSE))
}
colnames(portfolio) <- tickers #making the dataframes look pretty
names(portfolio.div) <- gsub(".div", "", names(portfolio.div))
portfolio.yield <- colSums(portfolio.div, na.rm = TRUE) #calculating dividend yield
portfolio.yield <- as.data.frame(t(portfolio.yield)) #converting to row
portfolio.yield$MINT <- NULL #removing cash yield - placeholde
for(ticker in names(portfolio.yield)){ #adding dividends into total return.
portfolio[nrow(portfolio), ticker] <- as.double(portfolio[nrow(portfolio), ticker]) + as.double(portfolio.yield[ticker])
}
portfolio.returns <- CalculateReturns(portfolio) #calculating returns with dividends added
portfolio <- na.omit(portfolio) #removing empty/NA values
portfolio.returns <- as.timeSeries(portfolio.returns) #converting to time series, required below
meanReturns <- colMeans(portfolio.returns) #calculating mean return for each ticker
covMat <- cov(portfolio.returns) #covariance matrix
portfolio.returns <- na.omit(portfolio.returns) # YOU MAY NEED THIS FOR ERRORS BELOW
######################STEP THREE: CONSTRUCTION #########################################
portSpec <- portfolioSpec( #this is where the risk aversion and other parameters are input
model = list(type = "MV", optimize = "minRisk",
estimator = "covEstimator", tailRisk = list(),
params = list(alpha = alp, a = risk_aversion)),
portfolio = list(weights = NULL, targetReturn = tar_return,
targetRisk = tar_risk, riskFreeRate = risk_free,
status = 0),
optim = list(solver = "solveRquadprog", objective = NULL,
params = list(meq = 2), control = list(), trace = FALSE))
######################STEP FOUR: PORTFOLIO GENERATION#########################################
#calculates efficient frontier, minimum variance portfolio, effiicent portfolio, minrisk
effFrontier <- portfolioFrontier(portfolio.returns, spec = portSpec, constraints = weights)
efmvPort <- minvariancePortfolio(portfolio.returns, spec = portSpec, constraints = weights)
efficientPort <- efficientPortfolio(portfolio.returns, spec = portSpec, constraints = weights)
minRiskPort <- minriskPortfolio(portfolio.returns, spec = portSpec, constraints = weights)
#the above functions work, but with new constraints added in, I need more memory to get more results
frontierWeights <- getWeights(effFrontier) # get allocations for each instrument for each point on the efficient frontier
frontierReturns <- getTargetReturn(effFrontier) #generates the return
frontier <- cbind(frontierWeights, frontierReturns) #formats return and weights into a dataframe
swirl
open(swirl)
open("swirl")
open(swirl)
swirl
r.swirl
r
